import os
import re
from os import environ as env
from typing import (
    List,
    Set,
)

from inflection import (
    humanize,
    pluralize,
    singularize,
)

from services import fetch_pull_request

TAG = [
    'build',
    'chore',
    'ci',
    'docs',
    'feat',
    'fix',
    'perf',
    'refactor',
    'revert',
    'style',
    'test',
]


def __logging(level: str, title: str, message: str):
    print(f'::{level} file=src/main.py,title={title}::{message}')


def __can_process(title: str):
    return title.lower().find('bump') < 0


def __can_relocate_words(title: str):
    return title.find(':') < 0


def __decorate_number(title: str):
    return re.sub(r'(([`]*)([0-9]+[0-9\.\-%$,]*)([`]*))', r'`\3`', title)


def __decorate_filename(title: str, files: List[str]):
    files_available = '|'.join(files)
    return re.sub(rf'([`]*)({files_available})([`]*)', r'`\2`', title)


def __parse_title(title: str):
    if __can_relocate_words(title):
        p = re.search(r'(.*)[(\[](.*)[)\]](.*)', title)
        plain_title = f'{p.group(1)}{p.group(3)}'
        tag = p.group(2).lower().strip()
        return tag, plain_title

    p = re.search(r'(.*)[\:][ ]*(.*)', title)
    return p.group(1).lower().strip(), p.group(2).lower().strip()


def __highlight(text: str, keywords: Set[str]):
    highlighted = text
    for k in keywords:
        try:
            __logging('info', 'parse', k)
            highlighted = re.sub(rf'(?<!`)({k})(?!`)', r'`\1`', highlighted)
            # highlighted = re.sub(rf'(?<!`)({re.escape(k)})(?!`)', r'`\1`', highlighted)
        except Exception as ex:
            __logging('error', f'parsing error during highlighting keyword {k}', str(ex))
            continue
    return highlighted


def __extend_singularize(symbols: List[str]):
    symbols.extend([singularize(symbol) for symbol in symbols])


def __extend_pluralize(symbols: List[str]):
    symbols.extend([pluralize(symbol) for symbol in symbols])


def __symbolise(raw_symbols: str):
    symbols = [humanize(symbol).lower().strip()
               for symbol in raw_symbols.split('\n') if len(humanize(symbol).lower().strip()) > 3]

    symbols.extend([symbol.replace(' ', '_') for symbol in symbols])
    return symbols


def main():
    symbols = __symbolise(env["symbols"])
    __extend_singularize(symbols)
    __extend_pluralize(symbols)

    # keywords = sorted(set(symbols), key=len, reverse=True)
    # keywords.append("self.request_body['pages'][0][param]s")
    # keywords.append("abc, def, yyy")

    keywords = ['fetch_entire_users.return_value.json.return_values', 'fetch entire users.return value.json.return values', 'fetch entire users.return value.json.return value', 'fetch_entire_users.return_value.json.return_value', 'test_failure_when_header_param_value_is_invalids', 'test failure when header param value is invalids', 'test_failure_when_header_param_value_is_invalid', 'test failure with header params without configs', 'test_failure_with_header_params_without_configs', 'test failure when header param value is invalid', 'test failure with header params without config', 'recognize pages async.apply async.side effects', 'test_failure_when_header_param_key_is_invalids', 'test response user recognized pages not founds', 'test_response_user_recognized_pages_not_founds', 'test_failure_with_header_params_without_config', 'test failure when header param key is invalids', 'recognize_pages_async.apply_async.side_effects', 'test_failure_when_header_param_key_is_invalid', 'recognize pages async.apply async.side effect', 'test_response_user_recognized_pages_not_found', 'test response user recognized pages not found', 'test failure when header param key is invalid', 'recognize_pages_async.apply_async.side_effect', 'test permission recognize page by note uuids', 'test_permission_recognize_page_by_page_uuids', 'test permission recognize page by page uuids', 'test_permission_recognize_page_by_note_uuids', 'test permission recognize page by note uuid', 'test_permission_recognize_page_by_note_uuid', 'test permission recognize page by page uuid', 'test_permission_recognize_page_by_page_uuid', 'apply_async.return_value.get.return_values', 'apply async.return value.get.return values', "logging['loggers']['django.db.backends']s", 'apply_async.return_value.get.return_value', 'apply async.return value.get.return value', "logging['loggers']['django.db.backends']", 'test_permission_in_user_recognized_pages', 'test failure iink is in invalid statuses', 'test_failure_iink_is_in_invalid_statuses', 'test permission in user recognized pages', 'self.do stroke analyze to block.argtypes', 'self.do_stroke_analyze_to_block.restypes', 'self.do stroke analyze to block.restypes', 'self.do_stroke_analyze_to_block.argtypes', 'self.do_stroke_analyze_to_block.argtype', 'test failure when dabs code is invalids', 'self.do stroke analyze to block.argtype', 'test_recognize_success_on_health_checks', 'markdown_view_template_use_highlight_js', "response of analyzer['processedshape']s", 'self.do_stroke_analyze_to_block.restype', 'test_response_when_iink_server_is_downs', 'self.do stroke analyze to block.restype', 'test failure when separator is invalids', 'test_permission_in_user_recognized_page', 'test_failure_when_separator_is_invalids', 'test recognize failure on health checks', 'test recognize success on health checks', 'test response when iink server is downs', 'markdown view template use highlight js', 'test_failure_when_dabs_code_is_invalids', 'test permission in user recognized page', "response_of_analyzer['processedshape']s", 'test_recognize_failure_on_health_checks', 'markdown view template use highlight j', 'test_failure_when_dabs_code_is_invalid', "response_of_analyzer['processedtext']s", 'test failure when dabs code is invalid', 'test failure iink is in invalid status', 'markdown_view_template_use_highlight_j', 'test has no permission to access users', "response_of_analyzer['processedshape']", "response of analyzer['processedshape']", 'test recognize failure on health check', 'test response when iink server is down', 'test_has_no_permission_to_access_users', 'test recognize success on health check', 'test failure when separator is invalid', 'test_recognize_failure_on_health_check', "response of analyzer['processedtext']s", 'test_failure_when_separator_is_invalid', 'test_response_when_iink_server_is_down', 'test_failure_iink_is_in_invalid_status', 'test_recognize_success_on_health_check', "self.request_body['pages'][0][param]s", "response of analyzer['processedtext']", 'test has no permission to access user', 'test_has_no_permission_to_access_user', "self.request body['pages'][0][field]s", 'test_recognition_task_does_not_exists', 'test_failure_when_separator_is_blanks', 'recognized_pages_health_check_minutes', 'test failure when separator is blanks', 'recognized pages health check minutes', 'test recognition task does not exists', "self.request_body['pages'][0][field]s", "response_of_analyzer['processedtext']", "self.request body['pages'][0][param]s", 'test_recognition_task_does_not_exist', 'mock.return value.json.return values', "self.request_body['pages'][0][param]", 'recognized pages health check minute', "self.required return value['label']s", 'test recognition task does not exist', "self.request body['pages'][0][param]", "self.required_return_value['label']s", 'mock.return_value.json.return_values', "self.request_body['pages'][0][field]", "self.request body['pages'][0][field]", 'test_failure_when_separator_is_blank', 'test failure when separator is blank', 'recognized_pages_health_check_minute', 'mock.return value.json.return value', "self.required_return_value['label']", 'mock.return_value.json.return_value', "config for separate['raw-content']s", "self.required return value['label']", "config_for_separate['raw-content']s", "config_for_separate['raw-content']", 'analyzer_block_size_sampling_steps', 'self.set paper max height.argtypes', 'self.set_paper_max_height.argtypes', 'markdown view use request contexts', 'self.set paper max height.restypes', 'test_failure_when_enum_is_invalids', 'analyzer block size sampling steps', 'self.set_paper_max_height.restypes', 'test failure when enum is invalids', 'markdown_view_use_request_contexts', "request.headers['authorizations']s", "config for separate['raw-content']", 'app.conf.broker transport options', 'markdown view use request context', 'test_failure_when_enum_is_invalid', 'self.set paper max height.argtype', "request.headers['authorizations']", 'self.set_paper_max_width.argtypes', 'sentry_sampling_ignore_path_lists', 'self.set_paper_max_height.argtype', "request.headers['authorization']s", 'self.set_paper_max_width.restypes', 'markdown_view_use_request_context', 'self.set_paper_max_height.restype', "request[0]['strokes'][0]['dots']s", 'app.conf.broker_transport_options', 'sentry sampling ignore path lists', 'analyzer block size sampling step', 'self.set paper max width.argtypes', 'self.set paper max width.restypes', 'test failure when enum is invalid', 'analyzer_block_size_sampling_step', 'test permission recognize strokes', 'self.set paper max height.restype', 'test_permission_recognize_strokes', 'self.do stroke analyze to blocks', 'sentry_sampling_ignore_path_list', 'recognition health check minutes', 'self.set_paper_max_width.restype', 'hwr api valid content type lists', 'self.set paper max width.restype', 'celery recognizer await timeouts', 'self.set paper max width.argtype', 'self.do_stroke_analyze_to_blocks', 'self.set_paper_max_width.argtype', 'hwr_api_valid_content_type_lists', "request[0]['strokes'][0]['dots']", "request.headers['authorization']", 'celery_recognizer_await_timeouts', 'test_permission_recognize_stroke', 'sentry sampling ignore path list', 'recognition_health_check_minutes', 'app.conf.broker transport option', 'app.conf.broker_transport_option', 'test permission recognize stroke', 'hwr api valid content type list', 'recognition_health_check_minute', 'test_response_with_side_effects', 'recognition health check minute', 'test_response_when_ndp_is_downs', 'create_result_of_fetching_users', 'hwr_api_valid_content_type_list', 'joined_string_from_string_enums', 'self.do_stroke_analyze_to_block', 'celery_recognizer_await_timeout', 'test response when ndp is downs', 'test response with side effects', 'markdown view template use tocs', 'test success with header params', 'celery recognizer await timeout', 'joined string from string enums', 'markdown_view_template_use_tocs', 'self.do stroke analyze to block', 'create result of fetching users', 'testresponseuserrecognizedpages', 'test_success_with_header_params', 'joined string from string enum', 'assertserviceunavailableerrors', 'test_response_when_ndp_is_down', 'test_success_with_header_param', 'markdown_view_template_use_toc', 'self.recognition task.requests', 'test success with header param', 'try recognize to health checks', 'create_result_of_fetching_user', 'test response with side effect', 'test field is invalid in pages', 'self.recognition_task.requests', 'test_field_is_invalid_in_pages', 'testresponseuserrecognizedpage', 'has_permission_to_access_users', 'test response when ndp is down', 'try_recognize_to_health_checks', 'has permission to access users', 'joined_string_from_string_enum', 'markdown view template use toc', 'create result of fetching user', 'test_response_with_side_effect', 'first(analyzer dots).dottypes', 'recognizeddocumentserializers', 'test success with credentials', 'has_permission_to_access_user', 'try recognize to health check', 'test_success_with_credentials', 'test field is invalid in page', 'self.recognition task.request', 'try fetching recognized pages', 'test_failure_on_health_checks', 'create analyzer stroke arrays', 'assertserviceunavailableerror', 'self.recognition_task.request', 'try_fetching_recognized_pages', 'try_recognize_to_health_check', 'test_required_fields_in_pages', 'test success on health checks', 'test_success_on_health_checks', 'has permission to access user', 'test required fields in pages', 'test_field_is_invalid_in_page', 'first(analyzer_dots).dottypes', 'create_analyzer_stroke_arrays', 'test failure on health checks', 'test failed when db is downs', 'identity verification errors', 'create_analyzer_stroke_array', 'recognitionresultserializers', 'recognize_page_by_note_uuids', 'test_failure_on_health_check', 'recognize page by page uuids', 'allowed skip authentications', 'test_success_on_health_check', 'test required fields in page', 'identity_verification_errors', 'test_required_fields_in_page', 'first(analyzer dots).dottype', 'last(analyzer dots).dottypes', 'recognition task registereds', 'test_success_with_credential', 'first(analyzer_dots).dottype', 'last(analyzer_dots).dottypes', 'test failure on health check', 'create analyzer stroke array', 'subscription_limit_exceededs', 'subscription limit exceededs', 'test success on health check', 'test response when db is ups', 'try_fetching_recognized_page', 'recognize page by note uuids', 'test_failed_when_db_is_downs', 'test_failure_dot_is_invalids', 'recognize_page_by_page_uuids', 'allowed_skip_authentications', 'test success with credential', 'recognition_task_registereds', 'recognizeddocumentserializer', 'test failure dot is invalids', 'test_response_when_db_is_ups', 'try fetching recognized page', 'self.required return values', 'identity_verification_error', 'last(analyzer_dots).dottype', 'create_recognized_documents', 'test failure dot is invalid', 'last(analyzer dots).dottype', 'allowed_skip_authentication', 'recognize_page_by_page_uuid', "self.configuration['lang']s", 'recognition_task_registered', 'subscription limit exceeded', 'catch middleware exceptions', 'test response when db is up', 'identity verification error', 'recognize page by page uuid', 'self.required_return_values', 'test_response_when_db_is_up', 'allowed skip authentication', 'create recognized documents', 'test_failure_dot_is_invalid', 'catch_middleware_exceptions', 'filesizelimitexceedederrors', 'recognize_page_by_note_uuid', 'pageswithstrokesserializers', 'recognitionresultserializer', 'recognition task registered', 'subscription_limit_exceeded', 'exceptionhandlermiddlewares', 'recognize page by note uuid', 'test failed when db is down', 'test_failed_when_db_is_down', 'test_failure_iink_is_downs', "self.configuration['lang']", 'pageswithstrokesserializer', 'self.required_return_value', 'filesizelimitexceedederror', 'pagewithstrokesserializers', 'recognitiontaskserializers', 'create_recognized_document', 'celery task track starteds', 'catch middleware exception', 'catch_middleware_exception', 'self.set_paper_max_heights', 'exceptionhandlermiddleware', 'create recognized document', 'identityverificationerrors', 'celery_task_track_starteds', 'self.required return value', 'test failure iink is downs', 'self.set paper max heights', 'self.request_body[field]s', 'recognitiontaskserializer', 'self.set paper max height', 'identityverificationerror', 'test failure iink is down', 'custom exception handlers', 'get authenticated headers', 'recognizedwordserializers', 'separate shapes and texts', 'strokes to raw recognizes', 'pagewithstrokesserializer', 'test_failure_iink_is_down', 'find recognized documents', 'self.set_paper_max_height', 'tokenauthmiddlewarestacks', 'separate_shapes_and_texts', 'self.request body[field]s', 'self.set_paper_max_widths', 'result.json.return_values', 'result.json.return values', 'strokes_to_raw_recognizes', 'custom_exception_handlers', 'celery task track started', 'block_size_sampling_steps', 'testjoinedstringfromenums', 'celery_task_track_started', 'find_recognized_documents', 'block size sampling steps', 'get_authenticated_headers', 'testsimpleauthentications', 'self.set paper max widths', 'testrecognizewithstrokes', 'strokes_to_raw_recognize', 'update recognition tasks', 'fetch instrospect tokens', 'baserecognizedpagesviews', 'app.conf.result backends', 'separate_shapes_and_text', 'recognizedwordserializer', "block dict['strokeids']s", 'app.conf.result_backends', 'analyzer_local_lib_paths', 'joined_string_from_enums', 'analyzer local lib paths', 'self.set paper max width', 'custom_exception_handler', 'block size sampling step', 'tokenauthmiddlewarestack', 'get_authenticated_header', 'get security definitions', 'analyzer local lib names', 'block_size_sampling_step', 'get query params schemas', 'find recognized document', 'strokes to raw recognize', 'make recognition results', 'test response not founds', 'stroke_recognize_schemes', 'self.request_body[field]', 'auth_password_validators', 'test exceed uuid lengths', 'test_exceed_uuid_lengths', 'stroke recognize schemes', 'recognizeduserpagesviews', 'fetch_instrospect_tokens', 'testfromenumkebabschemas', 'disagreed required terms', 'get_security_definitions', 'testjoinedstringfromenum', 'joined string from enums', 'self.set_paper_max_width', 'make_recognition_results', 'get_query_params_schemas', 'disagreed_required_terms', 'self.request body[field]', 'test_task_id_is_invalids', 'analyzer kind of engines', 'invalid_individual_infos', 'analyzer_kind_of_engines', 'separate shapes and text', 'result.json.return value', 'auth password validators', 'invalid individual infos', 'update_recognition_tasks', 'result.json.return_value', 'custom exception handler', 'get authenticated header', 'test_response_not_founds', 'analyzer_local_lib_names', "block_dict['strokeids']s", 'recognitiontaskfactories', 'find_recognized_document', 'testsimpleauthentication', 'testrecognizedpagestasks', 'serviceunavailableerrors', 'test task id is invalids', 'g_found_page_angle_rads', 'make_recognition_result', 'make recognition result', 'auth_password_validator', 'recognitiontaskstatuses', 'app.conf.beat schedules', 'test exceed uuid length', 'analyzer kind of engine', 'g_found_page_angle_degs', 'app.conf.result_backend', 'get_query_params_schema', 'markdown view templates', 'recognizeduserpagesview', 'spectacular_server_urls', 'app.conf.result backend', 'markdown_view_templates', 'update_recognition_task', 'test response not found', 'spectacular server urls', 'duplicatedfilereferrors', 'stroke_recognize_scheme', "block_dict['strokeids']", 'g found page angle degs', 'disagreed required term', 'g found page angle rads', 'test task id is invalid', 'analyzer prod lib paths', 'celery_task_time_limits', 'update recognition task', 'stroke recognize scheme', 'commonresultserializers', 'base_exception_handlers', 'analyzer local lib path', 'test exceed rrn lengths', "block dict['strokeids']", 'fetch instrospect token', 'base exception handlers', 'testrecognizedpagestask', 'celery task time limits', 'disagreed_required_term', 'analyzer local lib name', 'testrecognizewithstroke', 'get security definition', 'invalid individual info', 'analyzer_local_lib_path', 'test_exceed_uuid_length', 'joined_string_from_enum', 'joined string from enum', 'testfromenumkebabschema', 'auth password validator', 'get query params schema', 'analyzer_prod_lib_paths', 'get_security_definition', 'test_exceed_rrn_lengths', 'analyzer_local_lib_name', 'userpagerecognizerviews', 'fetch_instrospect_token', 'analyzer_kind_of_engine', 'baserecognizedpagesview', 'test_task_id_is_invalid', 'app.conf.beat_schedules', 'invalid_individual_info', 'test_response_not_found', 'serviceunavailableerror', 'validate access tokens', 'recognize pages asyncs', 'apipaginationresponses', 'analyzer prod lib path', 'convert to manageables', 'self.recognition tasks', 'analyzer_prod_lib_path', 'recognize_pages_asyncs', 'userpagerecognizerview', 'c stroke array[index]s', 'g_found_page_angle_rad', 'deserialize_from_jsons', 'test exceed rrn length', 'fetch_strokes_by_pages', 'analyzerblockresponses', 'app.conf.beat_schedule', 'celery_task_time_limit', 'test_field_is_invalids', 'spectacular server url', 'deserialize from jsons', 'recognitiontaskfactory', 'internal_server_errors', 'self.recognition_tasks', 'is_service_credentials', 'celery_broker_use_ssls', 'celery_result_backends', 'celery result backends', 'recognitionserializers', 'test field is invalids', 'g_found_page_angle_deg', 'page_recognize_schemes', 'g found page angle deg', 'markdown view template', 'spectacular_server_url', 'page recognize schemes', 'level number to levels', 'level_number_to_levels', 'c_stroke_array[index]s', 'internal server errors', 'base_exception_handler', 'authentication classes', 'celery task time limit', 'is service credentials', 'markdown_view_template', 'validate_access_tokens', 'fetch_strokes_by_notes', 'analyzer paper heights', 'duplicatedfilereferror', 'analyzer_paper_heights', 'test_exceed_rrn_length', 'fetch strokes by pages', 'g found page angle rad', 'convert_to_manageables', 'commonresultserializer', 'invalidsignatureerrors', 'base exception handler', 'authentication_classes', 'fetch strokes by notes', 'celery broker use ssls', 'app.conf.beat schedule', 'simpleauthentications', 'analyzer paper widths', 'validate access token', 'django_admin_enableds', 'g_jiix_str_data_idxes', 'recognitionserializer', 'make analyzer strokes', 'analyzer paper height', 'expired verify limits', 'apipaginationresponse', 'internal server error', 'authenticationschemes', 'g jiix str data idxes', 'recognitiontaskstatus', 'analyzerblockresponse', 'default_error_objects', 'test field is invalid', 'exceed request limits', 'celery result backend', 'recognize_pages_async', 'event_dict[self.key]s', 'event dict[self.key]s', 'invalidfiletypeerrors', 'fetch_strokes_by_note', 'response of analyzers', 'strokerecognizerviews', 'test enum snake types', 'deserialize_from_json', 'make_analyzer_strokes', 'celery_result_backend', 'deserialize from json', 'test_enum_snake_types', 'analyzer_paper_widths', 'assertinternalservers', 'filenametoolongerrors', 'fetch_strokes_by_page', 'django admin enableds', 'is service credential', 'celery_result_expires', 'level_number_to_level', 'test_field_is_invalid', 'c_stroke_array[index]', 'fetch strokes by page', 'expired_verify_limits', 'page_recognize_scheme', 'websocket urlpatterns', 'celery broker use ssl', 'internal_server_error', 'recognize pages async', 'c stroke array[index]', 'page recognize scheme', 'is_service_credential', 'websocket_urlpatterns', 'validate_access_token', 'invalidsignatureerror', 'convert to manageable', 'celery result expires', 'celery_broker_use_ssl', 'analyzer_paper_height', 'self.recognition_task', 'fetch strokes by note', 'exceed_request_limits', 'self.recognition task', 'convert_to_manageable', 'level number to level', 'default error objects', 'response_of_analyzers', 'response_of_analyzer', 'ndp instrospect uris', 'authentication_class', 'recognition examples', 'recognition_examples', 'invalid_verify_codes', 'django admin enabled', 'event_dict[self.key]', 'app.conf.broker urls', 'to recognize strokes', 'celery result expire', 'stroke to recognizes', 'invalid verify codes', 'create access tokens', 'healthchecktaskviews', 'test_required_fields', 'objectnotfounderrors', 'default error object', 'to_recognize_strokes', 'create_access_tokens', 'exceed request limit', 'rawcontentcontainers', 'recognizedpagesviews', 'celery_result_expire', 'log encrypted bodies', 'test enum snake type', "self['description']s", 'test required fields', 'expired verify limit', 'strokerecognizerview', 'analyzerdotresponses', 'c dots array[index]s', 'exceed_request_limit', 'ndp_instrospect_uris', 'response of analyzer', 'django_admin_enabled', 'recognitiontaskviews', 'tokenauthmiddlewares', 'spectacular settings', 'spectacular_settings', 'websocket_urlpattern', 'candidateserializers', "event_dict['level']s", 'make analyzer stroke', 'config for separates', 'filenametoolongerror', 'basepagesserializers', 'app.conf.broker_urls', 'default_error_object', 'simpleauthentication', 'test_enum_snake_type', 'analyzer_paper_width', 'authenticationscheme', 'stroke_to_recognizes', 'c_dots_array[index]s', 'authentication class', 'make_analyzer_stroke', 'config_for_separates', 'internalservererrors', 'event dict[self.key]', 'log_encrypted_bodies', 'websocket urlpattern', 'invalidfiletypeerror', "event dict['level']s", 'invalidfilereferrors', 'expired_verify_limit', 'analyzer paper width', 'assertinternalserver', 'analyzerserializers', 'invalid_verify_code', 'recognition example', 'recognition_schemes', 'to recognize stroke', 'app.conf.broker url', 'c dots array[index]', 'candidateserializer', 'create_recognitions', 'assertinvalidparams', 'self.paths_to_drops', 'to_recognize_stroke', 'service_credentials', 'self.request_bodies', 'tokenauthmiddleware', 'create recognitions', 'recognitiontaskview', 'objectnotfounderror', 'non_text_stroke_ids', 'self.expected datum', "self['description']", 'rawcontentcontainer', 'g jiix str data idx', 'healthchecktaskview', 'config_for_separate', 'stroke to recognize', 'test_required_field', 'spectacular_setting', 'self.request bodies', 'exceptionformatters', 'jsondeserializables', 'strokes_to_analyzes', 'phonenumber regexes', 'ndp instrospect uri', 'to analyzer strokes', 'invalidfilereferror', 'self.paths to drops', 'c_dots_array[index]', 'basepagesserializer', 'service credentials', 'baserecognizerviews', 'test required field', 'recognizedpagesview', 'acquire auth tokens', 'phonenumber_regexes', "event dict['level']", 'internalservererror', 'parse_data_to_dicts', 'invalidaccesserrors', 'create_access_token', "event dict['time']s",
                'recognition schemes', 'analyzerdotresponse', "event_dict['time']s", 'phonenumber schemas', 'ndp_instrospect_uri', 'invalid verify code', "logging['loggers']s", 'g_jiix_str_data_idx', 'recognition_example', 'pagerecognizerviews', 'strokes to analyzes', 'app.conf.broker_url', 'stroke_to_recognize', 'assertunauthorizeds', 'self.expected_datum', 'parse data to dicts', 'config for separate', "page['pagenumber']s", 'acquire_auth_tokens', 'create access token', 'phonenumber_schemas', 'to_analyzer_strokes', 'non text stroke ids', "event_dict['level']", 'spectacular setting', 'recognizeddocuments', 'analyzer_lib_paths', 'ndp auth base urls', 'invalid_dabs_codes', 'find.return values', 'assertinvalidparam', 'task.processed ats', 'analyzer lib paths', 'self.get responses', 'recognizeddocument', 'pages with configs', 'testrecognizetasks', 'parse data to dict', 'app.conf.timezones', 'self.paths_to_drop', 'from analyzer dots', 'celery broker urls', 'recognition_scheme', 'process exceptions', 'remove none values', 'insufficient_funds', 'fetch_entire_users', 'verify credentials', 'insufficient funds', 'create_recognition', 'service credential', 'ndp_client_secrets', 'testrecognizepages', 'non text stroke id', 'verify_credentials', 'process_exceptions', "page['pagenumber']", 'self.get_responses', 'permission classes', 'jsondeserializable', 'parse_data_to_dict', 'service_credential', 'unauthorizederrors', 'self.expected msgs', 'exceptionformatter', 'log_encrypted_body', "logging['loggers']", 'phonenumber_schema', 'task.processed_ats', 'angle eliminations', 'self.expected data', 'serialize to jsons', 'recognizer results', 'invalidparamerrors', 'invalidaccesserror', 'token_type,_tokens', 'phonenumber schema', 'create recognition', 'is database alives', 'recognizer_results', 'non_text_stroke_id', 'is_database_alives', 'to_analyzer_stroke', 'baserecognizerview', 'from_analyzer_dots', 'ndp client secrets', 'find.return_values', 'self.init.argtypes', "kwargs['message']s", 'strokes_to_analyze', 'ndp_auth_base_urls', 'microseconds_times', 'celery_broker_urls', 'swift code schemas', 'remove_none_values', "event dict['time']", 'acquire auth token', 'analyzerserializer', 'self.expected_msgs', 'self.expected_data', 'ndp_user_base_urls', 'serialize_to_jsons', 'self.init.restypes', "event_dict['time']", 'pagerecognizerview', 'pages_with_configs', 'permission_classes', 'strokes to analyze', 'recognition scheme', 'self.paths to drop', 'invalid dabs codes', 'acquire_auth_token', 'swift_code_schemas', 'log encrypted body', 'ndp user base urls', 'token type, tokens', 'microseconds times', 'fetch entire users', 'to analyzer stroke', 'assertunauthorized', 'angle_eliminations', 'ndp_user_base_url', "page['bookcode']s", 'recognize_strokes', 'insufficient_dabs', 'token_type,_token', 'transfer blockeds', 'testjoinedstrings', 'asgi applications', 'celery broker url', 'ndp_auth_base_url', 'self.request body', 'from analyzer dot', 'insufficient fund', 'self.get response', 'phonenumber regex', 'apierrorresponses', 'fetch entire user', 'init.side_effects', 'from_analyzer_dot', 'strokeserializers', 'self.init.argtype', 'app.conf.timezone', 'invalid dabs code', 'is authenticateds', 'process exception', 'misc_code_regexes', 'ndp ink base urls', 'insufficient dabs', 'microseconds time', 'self.descriptions', 'jsonserializables', 'self.init.restype', 'serialize to json', 'testrecognizepage', 'task.processed_at', "page['noteuuid']s", 'unauthorizederror', 'remove_none_value', 'process_exception', 'asgi_applications', 'recognize strokes', 'enum_from_choices', 'microseconds_time', 'assertbadrequests', 'enum from choices', 'validate requests', 'transfer_blockeds', 'unknown_resources', 'swift_code_schema', 'misc code regexes', 'find.side effects', 'verify credential', 'fetch_entire_user', 'verify_credential', 'invalidparamerror', 'self.status_codes', 'find.return value', 'is_authenticateds', 'recognizer_result', 'self.expected msg', 'analyzer lib path', 'serialize_to_json', 'remove none value', 'recognition tasks', 'analyzer_lib_path', 'angle elimination', 'insufficient_fund', 'find.return_value', 'ndp auth base url', 'recognition_tasks', 'recognizer result', 'angle_elimination', 'validate messages', 'phonenumber_regex', 'token type, token', 'hwr_api_base_urls', 'self.request_body', 'is database alive', 'self.expected_msg', "kwargs['message']", 'pages with config', 'ndp client secret', 'task.processed at', 'validate_requests', 'self.status codes', 'is_database_alive', 'serializedstrokes', 'celery_broker_url', 'testrecognizetask', 'ndp_ink_base_urls', 'unknown resources', 'pages_with_config', 'validate_messages', 'baseapiexceptions', 'hwr api base urls', 'invalid_dabs_code', 'commonserializers', 'init.side effects', 'ndp_client_secret', 'find.side_effects', 'self.get_response', 'swift code schema', 'ndp user base url', 'assertnocontents', 'analyzer_results', 'self.status code', 'shutdown workers', 'staticfiles_dirs', 'recognitiontasks', 'permission_class', 'is_authenticated', 'apierrorresponse', 'staticfiles dirs', 'request_examples', 'websocketconfigs', 'unknown_resource', 'django asgi apps', 'ndp ink base url', 'g_memotype_pages', 'get_caller_names', 'recognize stroke', 'self.status_code', 'self.description', 'get caller names', 'shutdown_workers', 'app_environments', 'recognition task', 'insufficient_dab', 'credentialstypes', 'analyzer strokes', 'celery timezones', 'assertbadrequest', 'transfer blocked', 'iink_server_keys', 'unknown resource', 'asgi application', 'hwr_api_base_url', 'request examples', "page['bookcode']", 'recognized pages', 'stroke analyzers', 'pagesserializers', 'enum from choice', 'serializedstroke', 'testjoinedstring', 'asgi_application', 'validationerrors', 'assertforbiddens', 'recognized_pages', "page['strokes']s", 'g memotype pages', "page['section']s", 'analyzer_strokes', 'django_asgi_apps', 'recognition_task', 'user_credentials', 'validate_message', 'iink_server_urls', 'transfer_blocked', 'datetime strings', 'user credentials', 'test permissions', 'datetime_strings', 'recognize_stroke', 'enum_from_choice', "page['noteuuid']", 'ndp_ink_base_url', 'processed_blocks', 'find.side_effect', 'find.side effect', 'iink server urls', 'app environments', 'strokeserializer', 'test_permissions', 'permission class', 'processed blocks', 'commonserializer', 'is authenticated', 'insufficient dab', 'analyzer results', 'baseapiexception', 'init.side effect', 'init.side_effect', 'celery_timezones', 'validate request', 'validate_request', 'hwr api base url', 'add_celery_tasks', 'validate message', 'add celery tasks', 'stroke_analyzers', 'badrequesterrors', 'jsonserializable', 'iink server keys', 'redis url infos', 'quota_exceededs', 'quota exceededs', 'user_credential', 'kind of engines', 'self.sectionids', 'integer_strings', 'recognitiontask', 'self.timestamps', 'set_paper_sizes', 'credentialstype', 'request example', 'assertforbidden', 'create_requests', 'analyzer stroke', 'iink server url', 'recognized page', 'add celery task', 'forbiddenerrors', 'create requests', 'test not founds', 'recognize_pages', 'is text strokes', 'sentry enableds', 'iink_server_key', 'shutdown_worker', 'set paper sizes', 'build_responses', 'iink server key', 'rawcontentitems', 'self.misc codes', 'g memotype page', 'request_example', 'assertnocontent', 'data[resource]s', 'iink_server_url', "page['strokes']", 'recognized_page', 'websocketconfig', 'result examples', 'stroke analyzer', 'strokeanalyzers', 'stroke_analyzer', 'self.is_actives', 'sentry_enableds', 'atomic_requests', 'testrecognizers', 'assertnotfounds', 'atomic requests', 'decode payloads', 'g_memotype_page', 'verified tokens', 'build responses', 'badrequesterror', 'pick_candidates', 'kind_of_engines', 'redis passwords', 'text stroke ids', 'recognizedwords', 'redis_url_infos', 'rest_frameworks', 'self.misc_codes', 'integer strings', 'analyzerresults', 'error_responses', 'rest frameworks', 'pageserializers', 'pagesserializer', 'text_stroke_ids', 'datetime_string', 'redis_passwords', 'testuuidschemas', 'raw content res', 'self.is actives', 'is_text_strokes', 'from_timestamps', 'result_examples', 'analyzerstrokes', 'pick candidates', 'traces_samplers', 'address_schemas', 'get caller name', 'analyzer result', 'django asgi app', 'self.starttimes', 'celery timezone', 'django_asgi_app', 'traces samplers', 'processed block', 'decode_payloads', 'misc code regex', 'staticfiles_dir', "page['section']", 'misc_code_regex', 'analyzer_result', 'assertionmixins', 'address schemas', 'test permission', 'from timestamps', 'add_celery_task', 'user credential', 'test_permission', 'testpermissions', 'c_stroke_arrays', 'celery_timezone', 'assertaccepteds', 'app_environment', 'raw_content_res', 'get_caller_name', 'app environment', 'verified_tokens', 'error responses', 'shutdown worker', 'c stroke arrays', 'assertconflicts', 'item.timestamps', 'recognize pages', 'datetime string', 'processed_block', 'validationerror', 'analyzer_stroke', 'streamconsumers', 'staticfiles dir', 'logjsonencoders', 'test_not_founds', 'recognizedword', 'analyzerblocks', 'handle headers', 'integer string', 'self.is_active', 'test responses', 'text stroke id', 'recognize page', 'traces_sampler', 'language codes', 'usernotesviews', 'set paper size', 'test successes', 'pick candidate', 'result_example', 'order_blockeds', 'requested_bies', 'installed apps', 'traces sampler', 'c stroke array', 'configurations', 'test_not_found', 'testpermission', 'xs,_ys,_ts,_ps', 'joined strings', 'from_timestamp', 'build response', 'set_paper_size', 'create request', 'rest framework', 'joined_strings', 'redis_password', 'is text stroke', 'error_response', 'redis password', 'atomic_request', 'ndp_client_ids', 'sentry enabled', "page['owner']s", 'xs, ys, ts, ps', 'language_codes', 'self.misc code', 'testparameters', 'assertcreateds', 'authorizations', 'pageserializer', 'streamconsumer', 'expired_tokens', 'analyzerresult', 'conflicterrors', 'address_schema', 'quota exceeded', 'raw_content_re', 'from timestamp', 'self.timestamp', 'already exists', 'handle_headers', 'self.usernames', 'sentry_enabled', 'redis_url_info', 'self.starttime', 'parsed_headers', 'self.finalizes', 'target classes', 'installed_apps', 'quota_exceeded', 'address schema', 'self.sectionid', 'error response', 'atomic request', 'already_exists', 'kind_of_engine', 'invalid states', 'validate jsons', 'pick_candidate', 'target_classes', 'test_responses', 'logjsonencoder', 'text_stroke_id', 'build_response', 'validate_jsons', 'recognize_page', 'verified token', 'restfulconfigs', 'item.timestamp', 'create_request', 'parsed headers', 'decode_payload', 'item.strokeids', 'self.misc_code', 'rawcontentitem', 'is_text_stroke', 'notfounderrors', 'integer_string', 'assertionmixin', 'request bodies', 'c_stroke_array', 'setuptestdatum', 'invalid params', 'rest_framework', 'testuuidschema', 'raw content re', 'self.is active', 'assertaccepted', 'result example', 'test_successes', 'ndp client ids', 'data[resource]', 'expired tokens', 'invalid_states', 'verified_token', 'invalid_params', 'test not found', 'testrrnschemas', 'order blockeds', 'testrecognizer', 'userpagesviews', 'analyzerstroke', 'assertnotfound', 'assertconflict', 'requested bies', 'kind of engine', 'self.dotcounts', 'redis url info', 'request_bodies', 'forbiddenerror', 'decode payload', "scope['user']s", 'strokeanalyzer', 'paper_heights', 'root_urlconfs', 'language_code', 'stroke arrays', 'xs,_ys,_ts,_p', 'patched_posts', 'handle header', 'need to saves', 'fetch strokes', 'self.contents', 'mongodb_hosts', 'self.dotlists', 'self.finalize', 'expired_token', 'processed ats', 'analyzerblock', 'validate_json', 'stroke_arrays', 'language code', 'order_blocked', "scope['user']", 'self.ownerids', 'allowed hosts', 'conflicterror', 'ndp client id', 'order blocked', 'installed app', 'content_types', 'analyzer dots', 'build_strokes', 'test response', 'notfounderror', 'section_codes', 'self.dotcount', 'ndp_client_id', 'filter shapes', 'setuptestdata', 'authenticates', 'self.username', 'task pre runs', 'joined_string', 'installed_app', 'invalid_state', 'self.endtimes', 'email regexes', 'handle_header', 'invalid state', 'c dots arrays', 'patched posts', 'email schemas', 'email_schemas', 'testparameter', 'requested ats', 'joined string', 'filter_shapes', 'build strokes', 'remove shapes', 'parsed_header', 'remove_shapes', 'item.dottypes', 'already exist', 'assertcreated', 'self.elements', 'allowed_hosts', 'grouped datum', 'analyzertemps', 'xs, ys, ts, p', 'validate json', 'analyzerviews', 'task_pre_runs', 'section codes', 'need analyzes', "page['owner']", 'boundingboxes', 'restfulconfig', 'email_regexes', 'userpagesview', 'test_foo_bars', 'self.messages', 'configuration', 'c_dots_arrays', 'invalid_param', 'need_analyzes', 'task.statuses', 'already_exist', 'testresponses', 'root urlconfs', 'authorization', 'invalid param', 'parsed header', 'processed_ats', 'credentials,s', 'fetch_strokes', 'usernotesview', 'expired token', 'requested_ats', 'grouped_datum', 'test_response', 'item.strokeid', 'testrrnschema', 'test foo bars', 'analyzer_dots', 'paper heights', 'content types', 'mongodb hosts', 'need_to_saves', 'raw_contents', 'raw contents', 'page radians', 'requested_at', 'self.heights', 'task_pre_run', 'test success', 'content_type', 'date strings', 'fetch_stroke', 'self.dotlist', 'processed at', 'target class', 'allowed host', 'stroke_array', 'iink_heights', 'need_analyze', 'patched_gets', 'remove shape', 'patched gets', 'self.noteids', 'build stroke', 'grouped_data', 'allowed_host', 'is anonymous', 'requested at', 'recognitions', 'iink heights', 'fetch stroke', 'patched_post', 'applications', 'root urlconf', 'deserializes', 'self.content', 'section_code', 'analyzertemp', 'testloggings', 'collect inks', 'create_tasks', 'need to save', 'test foo bar', 'authenticate', 'item.dottype', 'processed_at', 'self.message', 'paper widths', 'max_biguints', 'paper_widths', 'phonenumbers', 'static roots', 'self.pageids', 'string_enums', 'string enums', 'need_to_save', 'date_strings', 'page_numbers', 'analyzerview', 'task.results', 'collect_inks', 'mongodb_host', 'request_body', 'status codes', 'get_versions', 'root_urlconf', 'analyzerdots', 'paper_height', 'c dots array', 'target_class', 'requested by', 'remove_shape', 'pathdroppers', 'uuid_regexes', 'patched post', 'uuid regexes', 'c_dots_array', 'self.element', 'create tasks', 'mongodb host', 'status_codes', 'uuid schemas', 'static_roots', 'email_schema', 'test_foo_bar', 'build_stroke', 'get versions', 'filter_shape', 'self.endtime', 'filter shape', 'descriptions', 'test_success', 'elim results', 'email schema', 'need analyze', 'page_radians', 'self.schemas', 'save results', 'page numbers', 'analyzer dot', 'task pre run', 'requested_by', 'elim_results', 'delete flags', 'init workers', 'credentials,', 'paper height', 'testresponse', 'decodeerrors', 'stroke array', 'analyzer_dot', 'uuid_schemas', 'grouped data', 'apiresponses', 'delete_flags', 'self.ownerid', 'content type', 'environments', 'is_anonymous', 'section code', 'save_results', 'request body', 'max biguints', 'init_workers', 'rrn_regexes', 'token_parts', 'page radian', 'from params', 'string_enum', 'apiresponse', 'task.status', 'is_anonymou', 'page number', 'query_types', 'owner_codes', 'swift_codes', 'fetch_pages', 'get strokes', 'token parts', 'page_number', 'save result', 'block dicts', 'self.forces', 'raw_strokes', 'disconnects', 'self.schema', 'enum_values', 'serializers', 'self.noteid', 'static root', 'self.inners', 'iink scales', 'initializes', 'test_errors', 'save_result', 'decodeerror', 'paper_width', 'fetch_notes', 'environment', 'rrn regexes', 'raw strokes', 'jsonschemas', 'collect_ink', 'delete_flag', 'enum values', 'collect ink', 'iink widths', 'elim result', 'recognizeds', 'static_root', 'elim_result', 'fetch pages', 'raw content', 'item.counts', 'uuid_schema', 'create_task', 'self.widths', 'is stagings', 'task.result', 'is anonymou', 'testlogging', 'is_stagings', 'create task', 'analyzerdot', 'test_debugs', 'urlpatterns', 'owner codes', 'self.titles', 'test errors', 'ctypesenums', 'status_code', 'build_paths', 'status code', 'application', 'query types', 'static_urls', 'build paths', 'self.pageid', 'test debugs', 'patched_get', 'from_params', 'iink_widths', 'secret_keys', 'email_regex', 'secret keys', 'swift codes', 'max_biguint', 'iink height', 'string enum', 'max biguint', 'start times', 'iink_height', 'get version', 'date_string', 'phonenumber', 'self.height', 'recognition', 'get_strokes', 'fetch notes', 'patched get', 'block_dicts', 'boundingbox', 'deserialize', 'raw_content', 'paper width', 'credentials', 'static urls', 'email regex', 'uuid schema', 'get_version', 'description', 'iink_scales', 'pathdropper', 'start_times', 'max bigints', 'page_radian', 'max_bigints', 'delete flag', 'init worker', 'init_worker', 'date string', 'middlewares', 'get_stroke', 'build path', 'self.inits', 'test enums', 'query_type', 'test_uuids', 'dot counts', 'dabs codes', 'recognizes', 'block_dict', 'test uuids', 'static url', 'redis_urls', 'swift_code', 'pen_hovers', 'serializes', 'query type', 'initialize', 'start time', 'test warns', 'self.datum', 'disconnect', 'test_infos', 'recognized', 'credential', 'fetch note', 'time zones', 'test debug', 'max_bigint', 'dabs_codes', 'iink_xdpis', 'token_part', 'dots_bytes', 'self.clibs', 'item.count', 'self.force', 'start_time', 'note_uuids', 'log bodies', 'log events', 'fetch_note', 'not exists', 'save_items', 'test_debug', 'test_error', 'iink ydpis', 'book_codes', 'is_staging', 'token part', 'test_enums', 'middleware', 'log_events', 'from param', 'enum value', 'iink scale', 'build_path', 'self.paths', 'urlpattern', 'fetch_page', 'iink_ydpis', 'enum_value', 'result[k]s', 'secret key', 'jsonschema', 'save items', 'owner code', 'note uuids', 'note codes', 'test error', 'fetch page', 'candidates', 'book codes', 'self.codes', 'iink_scale', 'self.inner', 'block dict', 'log_levels', 'get stroke', 'base_times', 'iink xdpis', 'owner_code', 'errordatum', 'log levels', 'max bigint', 'time_zones', 'dot_counts', 'from_enums', 'test_warns', 'swift code', 'is staging', 'self.width', 'iink width', ',_requests', 'base times', 'decorators', 'post inits', 'binarydots', 'self.users', ', requests', 'ctypesenum', 'dots bytes', 'raw stroke', 'self.title', 'secret_key', 'self.enums', 'mime_types', 'pen hovers', 'mime types', 'from_param', 'static_url', 'post_inits', 'test infos', 'note_codes', 'uuid_regex', 'serializer', 'not_exists', 'iink_width', 'raw_stroke', 'redis urls', 'self.types', 'from enums', 'uuid regex', 'log_bodies', 'test_info', 'dabs code', 'serialize', ',_request', 'resources', 'base dirs', 'decorator', 'validates', 'rrn regex', 'rrn_regex', 'binarydot', 'use_l10ns', 'test info', 'redis_tls', 'is valids', 'testenums', 'noteuuids', 'db_tables', 'from_enum', 'time_zone', 'iink ydpi', 'dot_count', 'dots_byte', 'self.path', 'dot count', 'from enum', 'self.user', 'iink_ydpi', 'time zone', 'languages', 'userpages', 'errordata', 'self.enum', 'db tables', 'test uuid', 'filtereds', 'book_code', 'note uuid', 'self.data', 'is_locals', 'log_level', 'note code', 'self.keys', 'cls.tasks', 'templates', 'is_valids', 'not_exist', 'is locals', 'to blocks', 'mime_type', 'not exist', 'usernotes', 'self.type', 'candidate', 'log_event', 'post_init', 'testbases', 'analyzers', ', request', 'save item', 'redis url', 'post init', 'redis tls', 'use_i18ns', 'iink xdpi', 'result[k]', 'base_time', 'test_rrns', 'self.clib', 'redis_url', 'responses', 'log event', 'test_uuid', 'nullables', 'recognize', 'test warn', 'save_item', 'test rrns', 'pen downs', 'use i18ns', 'test enum', 'mime type', 'self.init', 'base_dirs', 'note_uuid', 'base time', 'databases', 'to_blocks', 'pen hover', 'pen_hover', 'test_enum', 'pageuuids', 'log level', 'abstracts', 'self.code', 'assertoks', 'pen_moves', 'dots byte', 'pen_downs', 'note_code', 'iink_xdpi', 'book code', 'addresses', 'dabs_code', 'pen moves', 'cls.paths', 'test_warn', 'use l10ns', 'payloads', 'converts', 'requests', 'app_envs', 'noteuuid', 'dottypes', 'decodeds', 'filtered', 'integers', 'redis_tl', 'initials', 'userpage', 'pen move', 'disposes', 'is local', 'defaults', 'sections', 'testenum', 'self.xes', 'db_table', 'booleans', 'receives', 'pageuuid', 'redis tl', 'base_dir', 'template', 'messages', 'pen_move', 'usernote', 'self.ies', 'statuses', 'db conns', 'use_l10n', 'db table', 'cls.task', 'testbase', 'use_i18n', 'is valid', 'is prods', 'to_dicts', 'stagings', 'loggings', 'self.ids', 'to_block', 'resource', 'commands', 'pen_down', 'setitems', 'to block', 'database', 'test_rrn', 'contents', 'is_prods', 'connects', 'use l10n', 'validate', 'log_body', 'response', 'log body', 'is_local', 'analyzer', 'nullable', 'wrappers', 'rollbars', 'db_conns', 'keywords', 'self.key', 'use i18n', 'cls.path', 'assertok', 'to dicts', 'language', 'test rrn', 'testings', 'pen down', 'pendings', 'base dir', 'abstract', 'app envs', 'is_valid', 'wrapper', 'use_tzs', 'numbers', 'pending', 'setitem', 'to dict', 'command', 'message', 'convert', 'results', 'boolean', 'self.id', 'strings', 'to_dict', 'app env', 'initial', 'staging', 'default', 'dottype', 'receive', 'handles', 'rollbar', 'creates', 'clients', 'loggers', 'db_conn', 'use tzs', 'dispose', 'is_prod', 'updates', 'app_env', 'testing', 'content', 'section', 'headers', 'payload', 'faileds', 'heights', 'pen_ups', 'configs', 'pen ups', 'is_devs', 'request', 'address', 'strokes', 'keyword', 'db conn', 'is prod', 'is devs', 'connect', 'decoded', 'logging', 'integer', 'objects', 'use_tz', 'builds', 'setups', 'titles', 'is dev', 'string', 'labels', 'y dpis', 'use tz', 'hashes', 'pen_up', 'self.y', 'anyofs', 'x_dpis', 'x dpis', 'stroke', 'allofs', 'widths', 'is_dev', 'height', 'config', 'status', 'client', 'bodies', 'locals', 'number', 'perves', 'values', 'create', 'fields', 'blocks', 'update', 'pen up', 'y_dpis', 'enters', 'models', 'emails', 'header', 'logger', 'result', 'errors', 'debugs', 'failed', 'handle', 'oneofs', 'self.x', 'arrays', 'owners', 'scales', 'object', 'inits', 'title', 'x dpi', 'packs', 'wraps', 'error', 'debug', 'calls', 'x_dpi', 'bdots', 'email', 'roots', 'field', 'ranks', 'users', 'model', 'words', 'scale', 'datum', 'nulls', 'exits', 'y dpi', 'names', 'array', 'tasks', 'pages', 'warns', 'oneof', 'infos', 'uuids', 'owner', 'block', 'value', 'prods', 'allof', 'setup', 'width', 'dones', 'posts', 'local', 'build', 'paths', 'y_dpi', 'enter', 'anyof', 'metum', 'hides', 'mains', 'codes', 'label', 'exit', 'pack', 'hide', 'info', 'done', 'uuid', 'name', 'inks', 'bdot', 'main', 'word', 'perf', 'page', 'path', 'null', 'data', 'root', 'body', 'call', 'init', 'meta', 'wrap', 'prod', 'task', 'hash', 'dots', 'post', 'rank', 'code', 'warn', 'user', 'dot', 'ink']
    keywords = set(keywords)
    __logging('info', 'keywords', str(keywords))

    pull_request = fetch_pull_request(
        access_token=env['access_token'],
        owner=env['owner'],
        repository=env['repository'],
        number=int(env['pull_request_number']),
    )

    if not __can_process(pull_request.title):
        return

    files = []
    for root, _, f_names in os.walk(env['src_path']):
        for f in f_names:
            file_path = os.path.join(root, f)
            if file_path.startswith('./.venv'):
                continue
            files.append(f)

    tag, plain_title = __parse_title(pull_request.title)
    plain_title = __decorate_number(plain_title)
    plain_title = __decorate_filename(plain_title, files)

    decorated_title = f'{tag}: {__highlight(plain_title, keywords)}'
    decorated_body = __highlight(pull_request.body, keywords)

    pull_request.edit(
        title=decorated_title or pull_request.title,
        body=decorated_body or pull_request.body,
    )


if __name__ == "__main__":
    main()
